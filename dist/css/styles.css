*, *:before, *:after {
  box-sizing: border-box; }

/**
 * Misc
 */
.clearfix:before, .clearfix:after {
  content: " ";
  display: table; }

.clearfix:after {
  clear: both; }

.responsive-iframe {
  position: relative;
  width: 100%;
  height: 0;
  padding-top: 65%; }
  .responsive-iframe > iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }

/**
 * Typography
 */
/**
*
* SVG-Sprites
*
**/
/*doc
---
title: SVG-Sprites
name: svgsprites
category: Components - SVG-Sprites
---

SVG Sprites are a very effective and performant method of adding icons to your
website. Our SVG's are generated by node svg-sprite which compiles all of the
svg's listed in the /svg directory into one file. You can then utilize the <use>
tag to pull certain shapes listed in that file into your website. Make sure that
you are also setting the correct viewBox dimensions from your original svg.

```html_example
    <svg class="svg svg--thearrow" viewBox="0 0 58 96">
      <use xlink:href="../svg/dist/symbol/svg/sprite.symbol.svg#thearrow"></use>
    </svg>
```
*/
.codeExample .svg {
  max-width: 100px;
  margin: auto; }

.input-field label {
  left: 0;
  font-size: 1.1em; }

.webform-component {
  margin: 2.5em 0; }

input[placeholder] {
  font-size: .9em; }

ul:not(.collection, .select-dropdown) {
  margin: 1em; }
  ul:not(.collection, .select-dropdown) li {
    list-style-type: disc;
    margin-left: 10px; }

*, *:before, *:after {
  box-sizing: border-box; }

html {
  font-size: 16px;
  line-height: 1.8; }
  @media (min-width: 500px) {
    html {
      font-size: 17.6px; } }
  @media (min-width: 800px) {
    html {
      font-size: 19.2px; } }

.page-node-79 {
  padding: 5vw 0; }
  .page-node-79 #page-title {
    font-size: 2.8em;
    text-shadow: 1px 1px 1px rgba(255, 255, 255, 0.5); }

.webform-component-matrix tbody .form-type-checkbox .option {
  font-size: .9em; }

.page-node-79 tr td:nth-child(3) {
  width: 30%; }

/*# sourceMappingURL=data:application/json;base64, */
